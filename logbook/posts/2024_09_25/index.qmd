---
title: "Day 3"
author: "Amy Heather"
date: "2024-09-25"
categories: [reproduce]
bibliography: ../../../quarto_site/references.bib
---

::: {.callout-note}

X. Total time used: Xh Xm (X%)

:::

## 09.26-09.55: Troubleshooting environment

### myutils

Copied <https://github.com/ivihernandez/myutils> into `original_study/` and `reproduction/`.

Then ran `main.py`, but error when importing `ExperimentRunner.py` for `import myutils`: `ImportError: No module named myutils`. Tried tweaking the imports with no luck, so went with a simple solution of keeping `myutils.py` alongside the other scripts, rather than in `reproduction/myutils/myutils.py`.

Then realised it was because I was running from the parent folder, so switched that and it resolved the issue

### matplotlib and networkx

Then found was missing matplotlib and networkx. Alike yesterday, choosing versions on or prior to **10 December 2013**...

* [Matplotlib 1.3.1](https://pypi.org/project/matplotlib/#history) (21 October 2013, 1.4.0 26 August 2014)
* [Networkx 1.8.1](https://pypi.org/project/networkx/#history) (4 August 2013, 1.9 22 June 2014)

Neither of these were on conda so installed from pypi

## 09.56-10.06, 10.32-11.03, 11.11-11.27: Running main.py

The file `main.py` is now able to run, and prints that programme has started and `Experiment Runner 1`.

We can see that `main.py` is looping through the files in `experiments-to-run`:

```{python}
from os import listdir
from os.path import isfile, join

mypath = '../../../reproduction/experiments-to-run'
experimentFiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]

experimentFiles
```

For each, it runs:

* ParameterReader
* ExperimentRunner
* SolutionWriter

From the article, I anticipate that this could take a long time to run, and I'd ideally try to make sure I can run a "mini" version successfully first, before then exploring whether I need more computational power to run in full. To do this, I made `test_run.ipynb`, which requried adding `ipykernel` to the environment. However, this would not work, stating it needed updated versions, so it appears this is **not supported** for Python 2.7.

::: {.callout-tip}
## Unsupported versions and IDEs

Impact of IDEs - with VSCode being an issue in running 2.7. From a google, I can see likewise that Jupyter Notebook and JupterLab no longer support Python 2.7 (since 2020).

### Running a mini version

In a case like this, if I were reusing the code for a new purpose, I might look to upgrade to Python 3+. However, for the sake of the reproduction, for now, sticking with 2.7. However, that brings limitations, like being unable to run notebooks, and having to use a pre-release version of the Python extension in VSCode to run the .py files.

:::

Hence, I just made a `test_run.py` without the loop. I had a brief look into the documentation for the evolutionary algorithms with inspyred, looking at the parameters being input and whether I could lower these so I can do a temporary run.

* `runs=1` - already minimal
* `population=100` - used for `popSize`, so might also help if lower? [This presentation](https://neuron.yale.edu/ftp/neuron/2018emory/netpyne-parameter-optimization.pdf) mentions popsize 10 being faster than 100 or 500.
* `generations=5` - used for `max_generations`, so might help to lower to 1, just for test-run?

Reducing population to `10` and generations to `1` it ran in **42 seconds** on my machine. This created a folder in `reproduction/` with the current date and time. It contained the experiment txt file, and six results txt files.

### Comparing to paper

The nine files in `experiments-to-run` align with Figure 5, which has nine grids where percentage of pre-screened is 10 to 90%. These were run with a population of `100` and `50` generations. It has a stated computational time of 6.5 hours. Hence, I will need to **adjust the parameters** in main.py in order to run with 50 generations (and not 5).

The plots include staff members, throughput and waiting times. This lines up with the results.txt files, which contain columns for four different staff members, and then columns with throughput and time.

### Run with population `100` and `5` generations

Running one of the scenarios (30% pre-screened) with parameters as in the code by default (100 and 5) took **22 minutes** on my machine. This produced 23 results sheets (as summarised then in `results.txt`)

## 11.48-X: Setting up R

Analysis of the results was performed in R, and there is one R file provided: `plotting_staff_results.r`. This looks to have some of the code required, but not all (for example, no imports/pre-processing of txt files).

I set up an R project and an renv.

## Timings

```{python}
import sys
sys.path.append('../')
from timings import calculate_times

# Minutes used prior to today
used_to_date = 138

# Times from today
times = [
    ('09.26', '09.55'),
    ('09.56', '10.06'),
    ('10.32', '11.03'),
    ('11.11', '11.27')]

calculate_times(used_to_date, times)
```