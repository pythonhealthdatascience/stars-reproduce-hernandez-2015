---
title: "Day 7"
author: "Amy Heather"
date: "2024-10-01"
categories: [reproduce]
bibliography: ../../../quarto_site/references.bib
---

::: {.callout-note}

Troubleshooting Experiment 1: trying a long run, expanding boundaries further, and cross-checking parameters between article and code. Total time used: 10h 6m (25.2%)

:::

## 09.15-09.17, 11.40-11.45: Troubleshooting Figure 5

Running one scenario with 100 population 50 generation 1 run on remote machine.

```
source ~/miniconda3/bin/activate
conda activate hernandez2015
python -m Experiment1
```

Below, you can see the result from this for prescreen10 (top left). The others are all 100 population 5 generation from 1 run or 3 runs for prescreen50. As you can see, this unfortunately has no impact on the Y axis, and just the density of points.

![](figure5_prescreen10_100_50_1.png)

Below is Figure 6 from prescreen10, just showing examples where forms > 6000.

![](figure6_prescreen10_100_50_1.png)

## 12.07-12.14, 15.54-16.01: Expanding boundaries further

I tried running with boundaries of 1-100 (rather than 1-60). Ran 100 population 5 generation 1 run.

Although this gets a more similar Y axis, the number of staff members became too high (so X axis becomes wrong), so that is not the solution.

![](figure5_boundary100_100_5_1.png)

Figure 6 (just showing forms > 10500)

![](figure6_boundary100_100_5_1.png)

## 16.02-16.28, 16.42-16.54: Checking other parameters

I set the boundaries back to 1-60 (as that gave the correct range of staff members for Figures 5 and 6).

Looking at Figure 6 in the article, the number of line managers was always fairly low, but I find that to be as high as dispensers - although, in Table 4 (which is a sample of results) they likewise find high numbers of line managers.

I decided to go back over the paper, identifying all the model parameters mentioned, and make sure I could find these in the code and confirm they matched the paper.

I returned to this the following day, so please refer to subsequent logbook for results.

## Timings

```{python}
import sys
sys.path.append('../')
from timings import calculate_times

# Minutes used prior to today
used_to_date = 547

# Times from today
times = [
    ('09.15', '09.17'),
    ('11.40', '11.45'),
    ('12.07', '12.14'),
    ('15.54', '16.01'),
    ('16.02', '16.28'),
    ('16.42', '16.54')]

calculate_times(used_to_date, times)
```