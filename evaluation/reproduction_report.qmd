---
title: "Summary report"
subtitle: "For computational reproducibility assessment of Hernandez et al. 2015"
format:
  html:
    page-layout: full
echo: False
bibliography: ../quarto_site/references.bib
---

## Study

> Hernandez, I., Ramirez-Marquez, J., Starr, D., McKay, R., Guthartz, S., Motherwell, M., Barcellona, J. **Optimal staffing strategies for points of dispensing**. *Computers & Industrial Engineering* 83 (2015). <https://doi.org/10.1016/j.cie.2015.02.015>.

This study models Points-of-Dispensing (PODs) in New York City. These are sites set up during a public health emergency to dispense countermeasures. The authors use evolutionary algorithms combined with discrete-event simulation to explore optimal staff numbers with regards to resource use, wait time and throughput.

## Computational reproducibility

Successfully reproduced **1 out of 8 (12.5%)** of items from the scope in **17h 56m (44.8%)**.

Required troubleshooting:

* **Environment** - installing packages and working with unsupported Python version
* **Additional repositories** - realised that another repository from the author is required and importing
* **Organisation** - organising files and amending output folder names
* **Run time** - exploring parameters that can run with similar results but shorter run time, and adding parallel processing
* **Parameters** - identifying mis-match parameters between article and code and attempting to correct
* **Scenarios** - identifying how to implement scenarios and writing code, or spotting code that can be used for scenario from part of a script
* **Figures and tables** - using provided code as a starting place, wrote additional code to tweak plotting code, and pre-process data beforehand
* **Command line** - removing import of `simpy.simplot` which prevented from running on the command line

::: {.panel-tabset}

## Figure 5

Cannot display original figure as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

![Reproduction](../reproduction/r_outputs/figure5.png){.lightbox}

## Figure 6

Cannot display original figure as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

![Reproduction](../reproduction/r_outputs/figure6.png){.lightbox}

## Figure 7

Cannot display original figure as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

![Reproduction](../reproduction/r_outputs/figure7.png){.lightbox}

## Figure 8

Cannot display original figure as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

![Reproduction](../reproduction/r_outputs/figure8.png){.lightbox}

## Figure 9

Cannot display original figure as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

![Reproduction](../reproduction/r_outputs/figure9.png){.lightbox}

## Figure 10

Cannot display original figure as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

![Reproduction](../reproduction/r_outputs/figure10.png){.lightbox}

## Table 3

Cannot display original table as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

```{python}
import pandas as pd

pd.read_csv('../reproduction/r_outputs/table3.csv')
```

## Table 4

Cannot display original table as do not have permission for reuse, but can view at @hernandez_optimal_2015

Reproduction:

```{python}
pd.read_csv('../reproduction/r_outputs/table4.csv')
```

:::

## Evaluation against guidelines

```{python}
import pandas as pd
import plotly.express as px

# Create dataframe of results
col = ['fully', 'partially', 'not', 'na']
eval_dict = {
  'STARS (essential)': [2, 0, 6, 0],
  'STARS (optional)': [0, 0, 5, 0],
  'Badges (criteria)': [3, 0, 9, 0],
  'Badges (badges)': [0, 0, 12, 0],
  'STRESS-DES': [18, 2, 3, 1],
  'ISPOR-SDM': [10, 0, 8, 0]
}
eval_wide = pd.DataFrame(eval_dict, index=col).T
eval = (eval_wide
        .melt(ignore_index=False)
        .reset_index()
        .rename(columns={'index': 'guideline',
                         'variable': 'result',
                         'value': 'count'}))

# Add percentages
eval['total'] = eval['count'].groupby(eval['guideline']).transform('sum')
eval['percent'] = eval['count'] / eval['total']
eval['percentage'] = round(eval['percent']*100, 1).astype(str) + '%'

# Create stacked bar visualisation
fig = px.bar(
  eval,
  x='percent',
  y='guideline',
  color='result',
  color_discrete_map={'fully': '#06a94d',
                      'partially': '#ffd68c',
                      'not': '#ff9999',
                      'na': '#d1dcea'},
  orientation='h',
  hover_data={
    'count': True,
    'percent': False,
    'percentage': True,
    'guideline': False,
    'result': False})
  
# Amend x axis label and ticks
fig.update_layout(xaxis = dict(
  range=[0,1],
  tickmode='array',
  tickvals=[0, 0.2, 0.4, 0.6, 0.8, 1],
  ticktext=['0%', '20%', '40%', '60%', '80%', '100%'],
  title=''))

# Amend y axis label and order, and add space between ticks and plot
fig.update_layout(yaxis=dict(
  autorange='reversed',
  title=''))
fig.update_yaxes(ticksuffix = '  ')

# Relabel legend
fig.update_layout(legend_title_text='Result')
newnames = {'fully': 'Fully met', 'partially': 'Partially met',
            'not': 'Not met', 'na': 'Not applicable'}
fig.for_each_trace(lambda t: t.update(name = newnames[t.name]))

# Show without toolbar
fig.show(config={'displayModeBar': False})
```

<sup>Context: The original study repository was evaluated against criteria from journal badges relating to how open and reproducible the model is and against guidance for sharing artefacts from the STARS framework. The original study article and supplementary materials (excluding code) were evaluated against reporting guidelines for DES models: STRESS-DES, and guidelines adapted from ISPOR-SDM.</sup>
